AI Robot Control
================

.. raw:: html

    <div style="background: #C3F8FF" class="admonition note custom">
        <p style="background: light-blue" class="admonition-title">
            Follow along: Robot Movement Examples
        </p>
        
        <div class="line-block">
            <div class="line">Let us follow along on how to drive the robot using the Jupyter notebook environment! </div>
            <div class="line">Below are the follow along examples:</div>
        </div>
        <ul>
            <li>
                Movement Instructions
            </li>
            <li>Movement Instructions with Odometry Information</li>
        </ul>
    </div>

.. raw:: html

    <hr>

Movement Instructions
-----------------------

Open the provided jupyter notebook

-   01_wheel.ipynb
-   | Running the cell code
    | `Ctrl + Enter`

.. thumbnail:: /_images/course_3/2.robot_driving_ros/robot_drive1.png

|

.. thumbnail:: /_images/course_3/2.robot_driving_ros/robot_drive2.png

|

-   Import the necessary libraries


.. code-block:: python

    import rospy
    import json
    from std_msgs.msg import String
    import time
    import math

-   Create zetabot node with ros publisher. This will allow us to have object to control the movements of our robot.
-   Create robot_command Topic Publisher object. 

.. code-block:: python

    pub = rospy.Publisher('/robot_command', String, queue_size=1)
    rospy.init_node('zetabot', anonymous=True)
    time.sleep(1)


-   Create a move() function
-   Convert {"MoveForward": 1} to Json String
-   Publish the converted message

.. code-block:: python

    def move():
        tmp = {"MoveForward": 1}
        msg = json.dumps(tmp)
        rospy.loginfo("Sent: %s", msg)
        pub.publish(msg)


-   Create stop() function
-   Convert {"Stop": 0} to Json String
-   Publish the converted message


.. code-block:: python

    def stop():
        tmp = {"Stop": 0}
        msg = json.dumps(tmp)
        rospy.loginfo("Sent: %s", msg)
        pub.publish(msg)

-   Create a moveTo() function
-   Convert {"MoveDelta": -0.5} to Json String
-   Publish the converted message

.. code-block:: python 

    def moveTo():
        tmp = {"MoveDelta": -0.5}
        msg = json.dumps(tmp)
        rospy.loginfo("Sent: %s", msg)
        pub.publish(msg)

-   Execute the moveTo() function which will move the robot backwards for 0.5 meters

.. code-block:: python 

    moveTo() # Move backwards for 0.5 meters

-   On top of moveTo() function, add distance parameter so that distance and directional information may be given. 

.. code-block:: python 

    def moveTo(distance):
        tmp = {"MoveDelta": distance}
        msg = json.dumps(tmp)
        rospy.loginfo("Sent: %s", msg)
        pub.publish(msg)

-   Create turnTo() function
-   Convert 45Â° to radians
-   Convert {"TurnDelta": math.radians(45)} to Json string
-   Publish the converted message

.. code-block:: python

    def turnTo():
        tmp = {"TurnDelta": math.radians(45)}
        msg = json.dumps(tmp)
        rospy.loginfo("Sent: %s", msg)
        pub.publish(msg)

-   Execute the turnTo() function which will turn the robot 45 degrees of angle from its initial position. 

.. code-block:: python 

    turnTo()

-   On top of turnTo() function, add degree parameter so that we may specify how much to turn the robot. 


.. code-block:: python

    def turnTo(degree):
        tmp = {"TurnDelta": math.radians(int(degree))}
        msg = json.dumps(tmp)
        rospy.loginfo("Sent: %s", msg)
        pub.publish(msg)

-   Run the move() function
-   2 second time delay
-   Run the stop() function

.. code-block:: python

    move()
    time.sleep(2)
    stop()

-   Execute the moveTo(distance) function
-   1 distance forward

.. code-block:: python

    moveTo(1)

-   Run the turnTo(degree) function
-   170 degree rotation

.. code-block:: python

    turnTo(170)
 


-   Run the turnTo(degree) function
-   25 degree rotation


.. code-block:: python

    turnTo(25)