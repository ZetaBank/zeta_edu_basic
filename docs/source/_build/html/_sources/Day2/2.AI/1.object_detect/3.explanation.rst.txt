Overall Explanation
=======================


Overview
---------

In our previous discussions, we examined various methods for recognizing objects within images.
However, image recognition systems face a couple of substantial challenges:

1. They cannot locate the position of the recognized object within the image. 
2. They struggle when multiple objects exist within a single image.

An object detection system addresses these issues.
It allows simultaneous object detection and recognition, enabling the model to recognize and detect multiple objects concurrently.

The object detection system used in our course takes an image as input and outputs a list of coordinates of the detected bounding boxes along with their classes and confidence values. In our follow along example, we employed the Coco-Dog model.
This model can detect and differentiate a specific class of objects (dogs) across a wide variety of breeds, and was trained on the MS COCO dataset.
Having object detection system allows for many different applications ranging from intrusion detections, inventory management,
foot traffic analysis and so on. 

The implementation of an object detection system has numerous applications, including intrusion detection, inventory management, pet surveillance, and wildlife monitoring.

Coco-Dog
-----------------

When it comes to object detection models, there are typically two categories:

1. one (single) stage object detectors 
2. two (dual) stage object detectors

The distinction between the two lies in their process:
dual-stage object detectors first locate the object within the image, then carry out classification only on the detected region.
While this approach yields higher accuracy, it demands more computational resources and slows down the processing time.

- a: Single stage object detector 
- b: Dual stage object detector

.. thumbnail:: /_images/Day2/2.AI/ssd.webp


The Coco-Dog model, however, is a single-stage object detection model.
By merging the detection and recognition stages, it significantly speeds up the process and requires less computational power.
As such, it is an ideal choice for applications where time and resource efficiency are essential, despite sacrificing a bit of accuracy compared to dual-stage models.
This balance makes Coco-Dog a robust and versatile tool in scenarios such as real-time pet surveillance or quick wildlife identification.

Other models for Object Detection
------------------------------------

With the jetson-inference examples, other pre-trained detection models are available:

.. list-table:: 
    :header-rows: 1

    * - Model
      - CLI argument
      - NetworkType enum
      - Object classes
    * - SSD-Mobilenet-v1
      - ``ssd-mobilenet-v1``
      - ``SSD_MOBILENET_V1``
      - 91 (COCO classes)
    * - SSD-Mobilenet-v2
      - ``ssd-mobilenet-v2``
      - ``SSD_MOBILENET_V2``
      - 91 (COCO classes)
    * - SSD-Inception-v2
      - ``ssd-inception-v2``
      - ``SSD_INCEPTION_V2``
      - 91 (COCO classes)
    * - DetectNet-COCO-Dog
      - ``coco-dog``
      - ``COCO_DOG``
      - dogs
    * - DetectNet-COCO-Bottle
      - ``coco-bottle``
      - ``COCO_BOTTLE``
      - bottles
    * - DetectNet-COCO-Chair
      - ``coco-chair``
      - ``COCO_CHAIR``
      - chair
    * - DetectNet-COCO-Airplane
      - ``coco-airplane``
      - ``COCO_AIRPLANE``
      - airplane
    * - ped-100
      - ``pednet``
      - ``PEDNET``
      - pedestrians
    * - multiped-500
      - ``multiped``
      - ``PEDNET_MULTI``
      - pedestrians, luggage
    * - facenet-120
      - ``facenet``
      - ``FACENET``
      - faces
